//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/InputAction/GenrateTest.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GenrateTest : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GenrateTest()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GenrateTest"",
    ""maps"": [
        {
            ""name"": ""Action1"",
            ""id"": ""0726442d-e33b-4a68-87f0-d95eaa6d410b"",
            ""actions"": [
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""5365ba1d-3e8e-4568-9fa2-07d892104de0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""69febbd4-cd1d-437a-a3ac-dce9cda02b25"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""96a3faf1-2a10-4629-8857-c691d75355ad"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""d0a6e897-835e-477f-b4df-0ef57bc40981"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""906972c1-fbb3-4801-bbd2-9071353d92a9"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""064c5c64-3f2c-4174-8381-8d02555c8082"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""532739da-afa4-426a-a429-21c94f5fd75c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""74903571-70aa-4e5a-8d4c-eed5398895a5"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Action2"",
            ""id"": ""cb95bddf-71f1-40ba-9c20-a573bbb5db12"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""4c9bc064-31e0-45b9-a941-e345eb1d81a1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""61152207-a801-43d7-b9fe-8325dcbc3930"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Action1
        m_Action1 = asset.FindActionMap("Action1", throwIfNotFound: true);
        m_Action1_Fire = m_Action1.FindAction("Fire", throwIfNotFound: true);
        m_Action1_Move = m_Action1.FindAction("Move", throwIfNotFound: true);
        // Action2
        m_Action2 = asset.FindActionMap("Action2", throwIfNotFound: true);
        m_Action2_Jump = m_Action2.FindAction("Jump", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Action1
    private readonly InputActionMap m_Action1;
    private IAction1Actions m_Action1ActionsCallbackInterface;
    private readonly InputAction m_Action1_Fire;
    private readonly InputAction m_Action1_Move;
    public struct Action1Actions
    {
        private @GenrateTest m_Wrapper;
        public Action1Actions(@GenrateTest wrapper) { m_Wrapper = wrapper; }
        public InputAction @Fire => m_Wrapper.m_Action1_Fire;
        public InputAction @Move => m_Wrapper.m_Action1_Move;
        public InputActionMap Get() { return m_Wrapper.m_Action1; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Action1Actions set) { return set.Get(); }
        public void SetCallbacks(IAction1Actions instance)
        {
            if (m_Wrapper.m_Action1ActionsCallbackInterface != null)
            {
                @Fire.started -= m_Wrapper.m_Action1ActionsCallbackInterface.OnFire;
                @Fire.performed -= m_Wrapper.m_Action1ActionsCallbackInterface.OnFire;
                @Fire.canceled -= m_Wrapper.m_Action1ActionsCallbackInterface.OnFire;
                @Move.started -= m_Wrapper.m_Action1ActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_Action1ActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_Action1ActionsCallbackInterface.OnMove;
            }
            m_Wrapper.m_Action1ActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Fire.started += instance.OnFire;
                @Fire.performed += instance.OnFire;
                @Fire.canceled += instance.OnFire;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
            }
        }
    }
    public Action1Actions @Action1 => new Action1Actions(this);

    // Action2
    private readonly InputActionMap m_Action2;
    private IAction2Actions m_Action2ActionsCallbackInterface;
    private readonly InputAction m_Action2_Jump;
    public struct Action2Actions
    {
        private @GenrateTest m_Wrapper;
        public Action2Actions(@GenrateTest wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_Action2_Jump;
        public InputActionMap Get() { return m_Wrapper.m_Action2; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Action2Actions set) { return set.Get(); }
        public void SetCallbacks(IAction2Actions instance)
        {
            if (m_Wrapper.m_Action2ActionsCallbackInterface != null)
            {
                @Jump.started -= m_Wrapper.m_Action2ActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_Action2ActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_Action2ActionsCallbackInterface.OnJump;
            }
            m_Wrapper.m_Action2ActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }
        }
    }
    public Action2Actions @Action2 => new Action2Actions(this);
    public interface IAction1Actions
    {
        void OnFire(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
    }
    public interface IAction2Actions
    {
        void OnJump(InputAction.CallbackContext context);
    }
}
